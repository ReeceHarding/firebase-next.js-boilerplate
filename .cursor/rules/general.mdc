---
description: Follow these rules for all requests.
globs: 
alwaysApply: false
---
# Project Instructions

Use specification and guidelines as you build the app.

Write the complete code for every step. Do not get lazy.

Your goal is to completely finish whatever I ask for.

You will see <ai_context> tags in the code. These are context tags that you should use to help you understand the codebase.

## Overview

This is an app 

## Tech Stack

- Frontend: Next.js, Tailwind, Shadcn, Framer Motion
- Backend: Firebase (Firestore, Storage, Auth), Server Actions
- Auth: Firebase Authentication
- Payments: Stripe
- Analytics: PostHog
- Deployment: Firebase

## Project Structure

- `actions` - Server actions
  - `db` - Database related actions
  - Other actions
- `app` - Next.js app router
  - `api` - API routes
  - `route` - An example route
    - `_components` - One-off components for the route
    - `layout.tsx` - Layout for the route
    - `page.tsx` - Page for the route
- `components` - Shared components
  - `ui` - UI components
  - `utilities` - Utility components
- `db` - Database
  - `schema` - Database schemas
- `lib` - Library code
  - `hooks` - Custom hooks
- `prompts` - Prompt files
- `public` - Static assets
- `types` - Type definitions

## Rules

Follow these rules when building the app.

### General Rules

- Use `@` to import anything from the app unless otherwise specified
- Use kebab case for all files and folders unless otherwise specified
- Don't update shadcn components unless otherwise specified

#### Env Rules

- If you update environment variables, update the `.env.example` file
- All environment variables should go in `.env.local`
- Do not expose environment variables to the frontend
- Use `NEXT_PUBLIC_` prefix for environment variables that need to be accessed from the frontend
- You may import environment variables in server actions and components by using `process.env.VARIABLE_NAME`

#### Type Rules

Follow these rules when working with types.

- When importing types, use `@/types`
- Name files like `example-types.ts`
- All types should go in `types`
- Make sure to export the types in `types/index.ts`
- Prefer interfaces over type aliases
- If referring to db types, use `@/db/schema` such as `SelectTodo` from `todos-schema.ts`

An example of a type:

`types/actions-types.ts`

```ts
export type ActionState<T> =
  | { isSuccess: true; message: string; data: T }
  | { isSuccess: false; message: string; data?: never }
```

And exporting it:

`types/index.ts`

```ts
export * from "./actions-types"
```

### AI Prompt for Preventing Timestamp Serialization Errors

"When you are working in this codebase, you must be extremely careful about data serialization between the server and the client.

**Here is the critical rule:** Any data retrieved from Firestore in a server action or server component **MUST** have its `Timestamp` objects converted to a serializable format before being sent to a client component.

Our project has a specific utility function for this purpose: `convertTimestampsInObject` located in `@/lib/utils.ts`.

Before completing any task that involves fetching data from Firestore on the server, you must verify that the data returned to the client is passed through `convertTimestampsInObject`. Failure to do so will cause the application to crash.

**Correct Implementation Example:**
```typescript
// GOOD: This prevents the error.
const rawData = { id: doc.id, ...doc.data() };
const serializableData = convertTimestampsInObject(rawData);

return {
  isSuccess: true,
  data: serializableData // Pass the sanitized data to the client
};
```

**Incorrect Implementation Example:**
```typescript
// BAD: This will cause a runtime error.
const rawData = { id: doc.id, ...doc.data() };

return {
  isSuccess: true,
  data: rawData // rawData contains non-serializable Timestamps
};
```

Acknowledge that you understand this rule. It is a non-negotiable step for all Firestore data fetching that interacts with the client.

## Code Philosophy

### General Principles

- Write clean, readable code with proper error handling
- Follow SOLID principles and maintain separation of concerns
- Use TypeScript for type safety
- Implement proper logging and monitoring
- make all buttons interactive. animations when i click them to show user they were clicked and registered

### Idiot-Proof Design

Build every feature with the assumption that the user will try to break it in unexpected ways. The system should be robust enough to handle malformed input, incorrect usage, and edge cases without crashing or producing strange results.

- **Flexible Inputs**: Forms should accept multiple valid formats (e.g., `example.com`, `www.example.com`, `https://example.com`).
- **Anticipate Errors**: Proactively identify what could go wrong and implement graceful error handling. A user error should never cause a system failure.
- **Clear Guidance**: If a user does something wrong, provide a clear, concise, and helpful error message that tells them exactly how to fix it.
- **No Dead Ends**: Ensure that users can always recover from an error state without having to refresh the page or start over.
- **Sensible Defaults**: Provide smart defaults for all settings to minimize the cognitive load on the user.

The goal is to create a seamless, frustration-free experience where the user feels guided and supported, no matter what they do.

