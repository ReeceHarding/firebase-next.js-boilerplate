---
description: Follow these rules when working on the frontend.
globs: 
alwaysApply: false
---
# Frontend Style Guide

A comprehensive design system and component guide for building beautiful, consistent, and accessible interfaces throughout the application following modern industry best practices.

## Critical Rendering Rules

**Background & Contrast Requirements:**
- All screens must render on a solid white background by default using `bg-white` on root containers
- Semi-transparent elements require a white base layer to display correctly
- Text must maintain WCAG AA contrast ratios (4.5:1 for normal text, 3:1 for large text)
- All interactive elements must preserve legibility in all states (hover, focus, active)

**Performance First:**
- Critical CSS must be inlined for above-the-fold content
- Non-critical CSS should be loaded asynchronously
- Images must use modern formats (WebP, AVIF) with fallbacks
- All animations must respect `prefers-reduced-motion`

## Table of Contents
1. [Core Design Principles](#core-design-principles)
2. [Design System Architecture](#design-system-architecture)
3. [Color System](#color-system)
4. [Typography](#typography)
5. [Spacing & Layout](#spacing--layout)
6. [Component Library](#component-library)
7. [Interactive States](#interactive-states)
8. [Animations & Transitions](#animations--transitions)
9. [Shadow System](#shadow-system)
10. [Responsive Design](#responsive-design)
11. [Accessibility Guidelines](#accessibility-guidelines)
12. [Performance Best Practices](#performance-best-practices)
13. [Security Considerations](#security-considerations)
14. [Testing Standards](#testing-standards)
15. [Best Practices](#best-practices)

## Core Design Principles

### 1. **Accessibility First**
- Design for screen readers and keyboard navigation
- Maintain focus management and tab order
- Use semantic HTML elements
- Implement proper ARIA attributes
- Test with actual assistive technologies

### 2. **Progressive Enhancement**
- Core functionality works without JavaScript
- Enhanced features layer on top
- Graceful degradation for older browsers
- Responsive by default

### 3. **Performance Conscious**
- Optimize for Core Web Vitals (LCP, FID, CLS)
- Lazy load non-critical resources
- Use efficient CSS selectors
- Minimize layout shifts

### 4. **Clean & Modern**
- Use plenty of whitespace
- Prefer subtle gradients over solid colors
- Minimal glassmorphism effects with `backdrop-blur-sm`
- Rounded corners (never sharp edges)
- Subtle animations that enhance rather than distract

### 5. **Purple-Centric Brand**
- Purple is our primary color (purple-600)
- Use purple gradients for emphasis
- Purple tints for hover states
- Purple shadows for depth

## Design System Architecture

### Design Tokens Structure
```typescript
// Design tokens should be defined as CSS custom properties
:root {
  /* Colors */
  --color-primary: 147 51 234;        /* purple-600 */
  --color-primary-hover: 126 34 206;  /* purple-700 */
  --color-secondary: 168 85 247;      /* purple-500 */
  
  /* Spacing */
  --space-xs: 0.25rem;   /* 4px */
  --space-sm: 0.5rem;    /* 8px */
  --space-md: 1rem;      /* 16px */
  --space-lg: 1.5rem;    /* 24px */
  --space-xl: 2rem;      /* 32px */
  
  /* Typography */
  --font-size-xs: 0.75rem;    /* 12px */
  --font-size-sm: 0.875rem;   /* 14px */
  --font-size-base: 1rem;     /* 16px */
  --font-size-lg: 1.125rem;   /* 18px */
  --font-size-xl: 1.25rem;    /* 20px */
  
  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1);
  
  /* Borders */
  --border-radius-sm: 0.375rem;  /* 6px */
  --border-radius-md: 0.5rem;    /* 8px */
  --border-radius-lg: 0.75rem;   /* 12px */
  --border-radius-xl: 1rem;      /* 16px */
  
  /* Transitions */
  --transition-fast: 150ms ease-out;
  --transition-base: 200ms ease-out;
  --transition-slow: 300ms ease-out;
}

/* Dark mode tokens */
@media (prefers-color-scheme: dark) {
  :root {
    --color-background: 3 7 18;        /* slate-950 */
    --color-foreground: 248 250 252;   /* slate-50 */
    --color-muted: 15 23 42;           /* slate-800 */
  }
}
```

### Component Token Usage
```typescript
// Use design tokens in components
<Button className="bg-[rgb(var(--color-primary))] hover:bg-[rgb(var(--color-primary-hover))] transition-colors duration-[var(--transition-base)]">
```

## Color System

### Primary Colors
```css
/* Purple Gradient */
bg-gradient-to-r from-purple-600 to-purple-400

/* Purple Scale with HSL for better manipulation */
purple-50: hsl(270, 100%, 98%)   /* Lightest - backgrounds */
purple-100: hsl(269, 100%, 95%)  /* Light backgrounds */
purple-200: hsl(269, 100%, 92%)  /* Borders, decorative */
purple-300: hsl(269, 100%, 87%)  /* Hover borders */
purple-400: hsl(270, 95%, 75%)   /* Gradient end */
purple-500: hsl(271, 91%, 65%)   /* Secondary actions */
purple-600: hsl(271, 81%, 56%)   /* Primary brand color */
purple-700: hsl(272, 72%, 47%)   /* Hover states */
purple-800: hsl(272, 69%, 38%)   /* Dark variants */
```

### Semantic Colors with CSS Custom Properties
```css
/* Light mode */
:root {
  --color-background: 0 0% 100%;
  --color-foreground: 222.2 84% 4.9%;
  --color-muted: 210 40% 98%;
  --color-muted-foreground: 215.4 16.3% 46.9%;
  --color-border: 214.3 31.8% 91.4%;
  --color-input: 214.3 31.8% 91.4%;
  --color-ring: 221.2 83.2% 53.3%;
}

/* Dark mode */
@media (prefers-color-scheme: dark) {
  :root {
    --color-background: 222.2 84% 4.9%;
    --color-foreground: 210 40% 98%;
    --color-muted: 217.2 32.6% 17.5%;
    --color-muted-foreground: 215 20.2% 65.1%;
    --color-border: 217.2 32.6% 17.5%;
    --color-input: 217.2 32.6% 17.5%;
    --color-ring: 224.3 76.3% 94.1%;
  }
}
```

### Color Accessibility
```typescript
// Ensure WCAG AA compliance
const colorContrast = {
  // Minimum contrast ratios
  normalText: 4.5,    // WCAG AA
  largeText: 3,       // WCAG AA
  enhanced: 7,        // WCAG AAA
  
  // Testing function
  checkContrast: (foreground: string, background: string) => {
    // Implementation using contrast calculation
    return calculateContrast(foreground, background) >= 4.5;
  }
};
```

## Typography

### Font Loading Strategy
```typescript
// Optimize font loading
import { Inter, JetBrains_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
  preload: true,
})

const jetbrainsMono = JetBrains_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-jetbrains-mono',
  preload: false, // Only preload critical fonts
})
```

### Responsive Typography Scale
```css
/* Fluid typography using clamp() */
:root {
  --font-size-xs: clamp(0.75rem, 0.7rem + 0.25vw, 0.8rem);
  --font-size-sm: clamp(0.875rem, 0.8rem + 0.375vw, 0.95rem);
  --font-size-base: clamp(1rem, 0.9rem + 0.5vw, 1.125rem);
  --font-size-lg: clamp(1.125rem, 1rem + 0.625vw, 1.25rem);
  --font-size-xl: clamp(1.25rem, 1.1rem + 0.75vw, 1.5rem);
  --font-size-2xl: clamp(1.5rem, 1.2rem + 1.5vw, 2rem);
  --font-size-3xl: clamp(1.875rem, 1.5rem + 1.875vw, 2.5rem);
  --font-size-4xl: clamp(2.25rem, 1.8rem + 2.25vw, 3rem);
  --font-size-5xl: clamp(3rem, 2.4rem + 3vw, 4rem);
}
```

### Font Weights with Accessibility
```css
/* Ensure sufficient weight contrast */
font-light: 300;      /* Use sparingly - can be hard to read */
font-normal: 400;     /* Body text */
font-medium: 500;     /* Emphasized text */
font-semibold: 600;   /* Subheadings */
font-bold: 700;       /* Headings */
font-extrabold: 800;  /* Display text only */
```

### Line Heights for Readability
```css
/* Optimized for reading */
leading-none: 1;         /* Display text only */
leading-tight: 1.25;     /* Headlines */
leading-snug: 1.375;     /* Subheadings */
leading-normal: 1.5;     /* Body text default */
leading-relaxed: 1.625;  /* Long-form content */
leading-loose: 2;        /* Very spacious reading */
```

### Accessible Text Patterns
```typescript
// Semantic heading structure
<h1 className="text-4xl md:text-6xl font-bold tracking-tight leading-tight">
  {/* Always start with h1, maintain hierarchy */}
</h1>

// Screen reader friendly section labels
<h2 className="sr-only">Navigation</h2>
<h2 className="text-2xl font-semibold" aria-level="2">
  Visible Section Title
</h2>

// Focus-visible text
<p className="focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600">
  Interactive text content
</p>
```

## Spacing & Layout

### Container System with Fluid Widths
```typescript
// Responsive container with safe areas
<div className="container mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl">
  {/* Content respects safe areas on mobile */}
</div>

// Content-specific containers
<div className="container max-w-prose mx-auto"> /* Optimal reading width */
<div className="container max-w-4xl mx-auto">   /* Form layouts */
<div className="container max-w-6xl mx-auto">   /* Dashboard layouts */
```

### Spacing Scale with Logical Properties
```css
/* Use logical properties for i18n */
padding-inline: 1rem;     /* Left/right or start/end */
padding-block: 2rem;      /* Top/bottom */
margin-inline-start: 1rem; /* Left or right depending on direction */

/* Spacing scale */
space-px: 1px;
space-0: 0;
space-0.5: 0.125rem;  /* 2px */
space-1: 0.25rem;     /* 4px */
space-1.5: 0.375rem;  /* 6px */
space-2: 0.5rem;      /* 8px */
space-2.5: 0.625rem;  /* 10px */
space-3: 0.75rem;     /* 12px */
space-3.5: 0.875rem;  /* 14px */
space-4: 1rem;        /* 16px */
space-5: 1.25rem;     /* 20px */
space-6: 1.5rem;      /* 24px */
space-7: 1.75rem;     /* 28px */
space-8: 2rem;        /* 32px */
space-9: 2.25rem;     /* 36px */
space-10: 2.5rem;     /* 40px */
space-11: 2.75rem;    /* 44px */
space-12: 3rem;       /* 48px */
space-14: 3.5rem;     /* 56px */
space-16: 4rem;       /* 64px */
space-20: 5rem;       /* 80px */
space-24: 6rem;       /* 96px */
space-28: 7rem;       /* 112px */
space-32: 8rem;       /* 128px */
```

### Grid System with Subgrid
```css
/* Modern grid layouts */
.grid-responsive {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(250px, 100%), 1fr));
  gap: var(--space-6);
}

/* Subgrid for complex layouts */
.grid-subgrid {
  display: grid;
  grid-template-columns: subgrid;
  grid-column: span 3;
}
```

## Component Library

### Accessible Button Components
```typescript
// Primary button with subtle effects
<Button 
  className="bg-purple-600 hover:bg-purple-700 focus-visible:ring-2 focus-visible:ring-purple-600 focus-visible:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-lg px-6 py-3 text-base font-medium shadow-md hover:shadow-lg transition-all duration-150"
  disabled={loading}
  aria-describedby={errorId}
  type="submit"
>
  {loading ? (
    <>
      <Loader2 className="w-4 h-4 mr-2 animate-spin motion-reduce:animate-pulse" aria-hidden="true" />
      <span>Processing...</span>
    </>
  ) : (
    'Submit Form'
  )}
</Button>

// Icon button with proper labeling
<Button 
  variant="ghost" 
  size="icon"
  aria-label="Close dialog"
  className="absolute top-4 right-4 hover:bg-gray-100 focus-visible:ring-2 focus-visible:ring-gray-500"
>
  <X className="w-4 h-4" aria-hidden="true" />
</Button>
```

### Card Components with Semantic HTML
```typescript
// Accessible card with subtle hover effect
<article className="bg-white/90 backdrop-blur-sm rounded-xl shadow-lg hover:shadow-xl border border-gray-200/50 transition-all duration-150 p-6 hover:translate-y-px">
  <header className="mb-4">
    <h3 className="text-xl font-semibold text-gray-900">
      {title}
    </h3>
    <time className="text-sm text-gray-500" dateTime={isoDate}>
      {formatDate(date)}
    </time>
  </header>
  
  <div className="prose prose-sm max-w-none">
    {content}
  </div>
  
  <footer className="mt-6 pt-4 border-t border-gray-200">
    <div className="flex items-center justify-between">
      <Button variant="outline" size="sm">
        Read More
        <span className="sr-only">about {title}</span>
      </Button>
      <div className="flex items-center gap-2">
        <span className="sr-only">Article category:</span>
        <Badge variant="secondary">{category}</Badge>
      </div>
    </div>
  </footer>
</article>
```

### Form Components with Validation
```typescript
// Accessible form field with validation
<div className="space-y-2">
  <Label htmlFor={fieldId} className="text-sm font-medium text-gray-700">
    Email Address
    <span className="text-red-500 ml-1" aria-label="required">*</span>
  </Label>
  
  <Input
    id={fieldId}
    type="email"
    value={email}
    onChange={(e) => setEmail(e.target.value)}
    className={cn(
      "w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors",
      error && "border-red-500 focus:ring-red-500 focus:border-red-500"
    )}
    placeholder="Enter your email"
    aria-invalid={!!error}
    aria-describedby={error ? `${fieldId}-error` : undefined}
    autoComplete="email"
    required
  />
  
  {error && (
    <div id={`${fieldId}-error`} className="text-sm text-red-600 flex items-center gap-1">
      <AlertCircle className="w-4 h-4 flex-shrink-0" aria-hidden="true" />
      {error}
    </div>
  )}
  
  <div className="text-xs text-gray-500">
    We'll never share your email with anyone else.
  </div>
</div>
```

## Interactive States

### Focus Management
```css
/* Modern focus styles */
.focus-visible:focus-visible {
  outline: 2px solid hsl(var(--color-ring));
  outline-offset: 2px;
}

/* Focus within for containers */
.focus-within:focus-within {
  ring: 2px solid hsl(var(--color-ring));
  ring-offset: 2px;
}

/* Skip links for keyboard navigation */
.skip-link {
  position: absolute;
  top: -40px;
  left: 6px;
  background: white;
  color: black;
  padding: 8px;
  border-radius: 4px;
  text-decoration: none;
  z-index: 1000;
  transition: top 0.2s;
}

.skip-link:focus {
  top: 6px;
}
```

### Subtle Hover States
```css
/* Conservative hover effects only */
@media (prefers-reduced-motion: reduce) {
  .hover-lift {
    transform: none !important;
    transition: none !important;
  }
}

@media (prefers-reduced-motion: no-preference) {
  .hover-lift {
    transition: transform 100ms ease-out, box-shadow 100ms ease-out;
  }
  
  .hover-lift:hover {
    transform: translateY(-1px); /* Minimal 1px lift */
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Gentle shadow */
  }
  
  /* Even more subtle for cards */
  .hover-card {
    transition: box-shadow 150ms ease-out;
  }
  
  .hover-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08); /* Very subtle */
  }
}
```

### Conservative Loading States
```typescript
// Subtle loading states with reduced motion consideration
<Button disabled={loading} className="relative">
  {loading && (
    <div className="absolute inset-0 flex items-center justify-center">
      <Loader2 className="w-4 h-4 animate-spin motion-reduce:animate-pulse" />
      <span className="sr-only">Loading...</span>
    </div>
  )}
  <span className={loading ? 'invisible' : 'visible'}>
    Submit
  </span>
</Button>

// Alternative: Text-based loading (more accessible)
<Button disabled={loading}>
  {loading ? 'Processing...' : 'Submit'}
</Button>

// Subtle progress indication
<Button disabled={loading} className="relative overflow-hidden">
  {loading && (
    <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent animate-pulse" />
  )}
  <span className={loading ? 'opacity-75' : 'opacity-100'}>
    {loading ? 'Processing...' : 'Submit'}
  </span>
</Button>
```

## Animations & Transitions

### Motion Preferences (Critical)
```css
/* Always respect user motion preferences */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
```

### Subtle Animation Guidelines
**Core Principles:**
- **Less is more** - Prefer subtle, purposeful animations
- **Fast and smooth** - Keep durations under 200ms for interactions
- **Functional animations only** - Every animation should serve a purpose
- **Respect accessibility** - Always check motion preferences

### Standard Durations (Conservative)
```css
/* Keep animations short and purposeful */
duration-75   /* 75ms - Micro-interactions (hover, focus) */
duration-100  /* 100ms - Button presses, small state changes */
duration-150  /* 150ms - Standard transitions (most common) */
duration-200  /* 200ms - Card hover, modal entry (maximum for interactions) */
duration-300  /* 300ms - Page transitions only */
```

### Subtle Hover Effects
```css
/* Conservative hover animations */
hover:scale-[1.01]    /* Very subtle lift - barely noticeable */
hover:scale-[1.02]    /* Subtle lift - preferred maximum */
hover:-translate-y-px /* 1px lift only */
hover:shadow-md       /* Gentle shadow increase */

/* Avoid these - too aggressive */
/* hover:scale-105, hover:scale-110, hover:-translate-y-2 */
```

### Performance-Optimized Subtle Animations
```css
/* Gentle entrance animation */
.animate-fade-in {
  animation: fadeIn 150ms ease-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(4px); /* Only 4px movement */
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Conservative loading state */
.animate-pulse-subtle {
  animation: pulseSubtle 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes pulseSubtle {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.8; /* Less dramatic than default pulse */
  }
}

/* Use sparingly - only when necessary */
.will-change-transform {
  will-change: transform;
}
```

### Minimal Staggered Effects
```typescript
// Very subtle staggered fade-in
const MinimalStaggeredList = ({ items }) => {
  const [isVisible, setIsVisible] = useState(false);
  
  useEffect(() => {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    if (prefersReducedMotion) {
      setIsVisible(true);
    } else {
      // Immediate for reduced motion sensitivity
      const timer = setTimeout(() => setIsVisible(true), 50);
      return () => clearTimeout(timer);
    }
  }, []);

  return (
    <ul className="space-y-4">
      {items.map((item, index) => (
        <li
          key={item.id}
          className={`transition-opacity duration-100 ${
            isVisible ? 'opacity-100' : 'opacity-0'
          }`}
          style={{ 
            transitionDelay: `${index * 25}ms`, // Much shorter delay
          }}
        >
          {item.content}
        </li>
      ))}
    </ul>
  );
};
```

### Animation Best Practices (Conservative Approach)

**✅ DO:**
- Use `opacity` and `transform` for performance
- Keep durations under 200ms for interactions
- Use `ease-out` for natural feeling
- Always respect `prefers-reduced-motion`
- Test with actual users, especially those with motion sensitivity
- Use animations to guide user attention subtly

**❌ DON'T:**
- Use `scale(1.05)` or higher - too aggressive
- Animate `height`, `width`, or `top/left` properties
- Use bounce or elastic easing - too playful for most UIs
- Chain multiple animations together
- Use animations just for decoration
- Ignore accessibility preferences

**Common Subtle Patterns:**
```css
/* Gentle button press */
button:active {
  transform: scale(0.98);
  transition: transform 75ms ease-out;
}

/* Subtle focus ring */
input:focus {
  ring: 2px solid blue;
  transition: ring 100ms ease-out;
}

/* Minimal card lift */
.card:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  transition: all 150ms ease-out;
}
```

## Shadow System

### Elevation System
```css
/* Semantic shadow levels */
--shadow-none: 0 0 #0000;
--shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
--shadow-base: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
--shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
--shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
--shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
--shadow-2xl: 0 25px 50px -12px rgb(0 0 0 / 0.25);
--shadow-inner: inset 0 2px 4px 0 rgb(0 0 0 / 0.05);

/* Colored shadows for brand elements */
--shadow-purple: 0 10px 15px -3px rgb(147 51 234 / 0.1), 0 4px 6px -4px rgb(147 51 234 / 0.1);
--shadow-purple-lg: 0 20px 25px -5px rgb(147 51 234 / 0.1), 0 8px 10px -6px rgb(147 51 234 / 0.1);
```

## Responsive Design

### Container Queries
```css
/* Modern container queries */
.card-container {
  container-type: inline-size;
  container-name: card;
}

@container card (min-width: 400px) {
  .card-content {
    display: flex;
    flex-direction: row;
    gap: 1rem;
  }
}

@container card (min-width: 600px) {
  .card-content {
    gap: 2rem;
  }
}
```

### Responsive Typography
```css
/* Fluid typography with container queries */
@container (min-width: 320px) {
  .responsive-text {
    font-size: clamp(1rem, 4vw, 1.5rem);
  }
}

@container (min-width: 768px) {
  .responsive-text {
    font-size: clamp(1.125rem, 3vw, 1.75rem);
  }
}
```

### Responsive Spacing
```css
/* Responsive spacing scale */
.responsive-spacing {
  padding: clamp(1rem, 5vw, 3rem);
  margin-bottom: clamp(1rem, 8vw, 4rem);
}
```

## Accessibility Guidelines

### WCAG 2.1 AA Compliance
```typescript
// Color contrast checking
const ensureContrast = (foreground: string, background: string) => {
  const contrast = calculateContrast(foreground, background);
  if (contrast < 4.5) {
    console.warn(`Low contrast: ${contrast.toFixed(2)}. Minimum: 4.5`);
  }
  return contrast >= 4.5;
};

// Focus management
const FocusManager = ({ children }) => {
  const ref = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    const element = ref.current;
    if (element) {
      const focusableElements = element.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      
      // Ensure proper tab order
      focusableElements.forEach((el, index) => {
        el.setAttribute('tabindex', index.toString());
      });
    }
  }, []);
  
  return <div ref={ref}>{children}</div>;
};
```

### Screen Reader Support
```typescript
// Proper ARIA labels and descriptions
<button
  aria-label="Close navigation menu"
  aria-expanded={isOpen}
  aria-controls="navigation-menu"
  onClick={toggleMenu}
>
  <X className="w-4 h-4" aria-hidden="true" />
</button>

// Live regions for dynamic content
<div aria-live="polite" aria-atomic="true" className="sr-only">
  {statusMessage}
</div>

// Skip navigation
<a
  href="#main-content"
  className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-white text-blue-600 px-4 py-2 rounded-md"
>
  Skip to main content
</a>
```

### Keyboard Navigation
```typescript
// Keyboard event handling
const handleKeyDown = (event: KeyboardEvent) => {
  switch (event.key) {
    case 'Escape':
      event.preventDefault();
      onClose();
      break;
    case 'Tab':
      if (event.shiftKey) {
        // Handle shift+tab
      } else {
        // Handle tab
      }
      break;
    case 'ArrowDown':
    case 'ArrowUp':
      event.preventDefault();
      // Handle arrow navigation
      break;
  }
};
```

## Performance Best Practices

### Critical CSS
```css
/* Inline critical CSS for above-the-fold content */
.critical-above-fold {
  /* Essential styles for immediate render */
  font-family: system-ui, -apple-system, sans-serif;
  line-height: 1.6;
  color: rgb(17 24 39);
  background-color: white;
}
```

### Lazy Loading
```typescript
// Lazy load components
const LazyComponent = lazy(() => import('./ExpensiveComponent'));

// Image optimization
<Image
  src="/hero-image.jpg"
  alt="Hero image description"
  width={800}
  height={600}
  priority={isAboveFold}
  loading={isAboveFold ? 'eager' : 'lazy'}
  placeholder="blur"
  blurDataURL="data:image/jpeg;base64,..."
/>
```

### Bundle Optimization
```typescript
// Code splitting by route
const Dashboard = lazy(() => import('./Dashboard'));
const Settings = lazy(() => import('./Settings'));

// Tree shaking friendly imports
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

// Dynamic imports for large dependencies
const ChartComponent = dynamic(() => import('chart.js'), {
  loading: () => <div>Loading chart...</div>,
  ssr: false
});
```

## Security Considerations

### Content Security Policy
```html
<!-- Strict CSP headers -->
<meta http-equiv="Content-Security-Policy" content="
  default-src 'self';
  script-src 'self' 'unsafe-inline' https://trusted-scripts.com;
  style-src 'self' 'unsafe-inline';
  img-src 'self' data: https:;
  font-src 'self' https://fonts.gstatic.com;
  connect-src 'self' https://api.example.com;
">
```

### Input Sanitization
```typescript
// Sanitize user input
import DOMPurify from 'isomorphic-dompurify';

const sanitizeHTML = (dirty: string) => {
  return DOMPurify.sanitize(dirty, {
    ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'p', 'br'],
    ALLOWED_ATTR: []
  });
};

// Safe innerHTML
<div dangerouslySetInnerHTML={{ __html: sanitizeHTML(userContent) }} />
```

### XSS Prevention
```typescript
// Escape user data
const escapeHtml = (unsafe: string) => {
  return unsafe
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
};

// Use template literals safely
const createSafeHTML = (template: string, ...values: string[]) => {
  return template.replace(/\{\{\s*(\d+)\s*\}\}/g, (match, index) => {
    return escapeHtml(values[parseInt(index)]);
  });
};
```

## Testing Standards

### Component Testing
```typescript
// Accessibility testing
import { render, screen } from '@testing-library/react';
import { axe, toHaveNoViolations } from 'jest-axe';

expect.extend(toHaveNoViolations);

test('should not have accessibility violations', async () => {
  const { container } = render(<Button>Click me</Button>);
  const results = await axe(container);
  expect(results).toHaveNoViolations();
});

// Keyboard navigation testing
test('should handle keyboard navigation', async () => {
  const user = userEvent.setup();
  render(<Navigation />);
  
  await user.keyboard('{Tab}');
  expect(screen.getByRole('button', { name: /menu/i })).toHaveFocus();
  
  await user.keyboard('{Enter}');
  expect(screen.getByRole('navigation')).toBeVisible();
});
```

### Visual Regression Testing
```typescript
// Storybook visual testing
import { Meta, StoryObj } from '@storybook/react';

const meta: Meta<typeof Button> = {
  title: 'Components/Button',
  component: Button,
  parameters: {
    layout: 'centered',
    // Visual testing configuration
    chromatic: {
      modes: {
        mobile: { viewport: 'iphone6' },
        desktop: { viewport: 'large' },
      }
    }
  }
};

// Test different states
export const Default: StoryObj<typeof Button> = {
  args: {
    children: 'Button'
  }
};

export const Disabled: StoryObj<typeof Button> = {
  args: {
    children: 'Button',
    disabled: true
  }
};
```

### Performance Testing
```typescript
// Core Web Vitals testing
import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';

const sendToAnalytics = (metric: Metric) => {
  // Send to your analytics service
  console.log(metric);
};

// Monitor Core Web Vitals
getCLS(sendToAnalytics);
getFID(sendToAnalytics);
getFCP(sendToAnalytics);
getLCP(sendToAnalytics);
getTTFB(sendToAnalytics);
```

## Best Practices

### 1. **Semantic HTML First**
```html
<!-- Use proper semantic elements -->
<header>
  <nav aria-label="Main navigation">
    <ul>
      <li><a href="/">Home</a></li>
      <li><a href="/about">About</a></li>
    </ul>
  </nav>
</header>

<main>
  <article>
    <header>
      <h1>Article Title</h1>
      <time datetime="2024-01-01">January 1, 2024</time>
    </header>
    <p>Article content...</p>
  </article>
</main>

<aside aria-label="Related articles">
  <!-- Sidebar content -->
</aside>

<footer>
  <!-- Footer content -->
</footer>
```

### 2. **Progressive Enhancement**
```typescript
// Start with working HTML/CSS, enhance with JavaScript
const EnhancedForm = () => {
  const [clientLoaded, setClientLoaded] = useState(false);
  
  useEffect(() => {
    setClientLoaded(true);
  }, []);
  
  return (
    <form>
      <input type="email" name="email" required />
      <button type="submit">Subscribe</button>
      
      {/* Progressive enhancement */}
      {clientLoaded && (
        <div className="mt-4">
          <RealTimeValidation />
          <AdvancedFeatures />
        </div>
      )}
    </form>
  );
};
```

### 3. **Performance Monitoring**
```typescript
// Monitor performance metrics
useEffect(() => {
  // Monitor Next.js performance
  const observer = new PerformanceObserver((list) => {
    for (const entry of list.getEntries()) {
      if (entry.entryType === 'navigation') {
        console.log('Page load time:', entry.duration);
      }
    }
  });
  
  observer.observe({ type: 'navigation', buffered: true });
  
  return () => observer.disconnect();
}, []);
```

### 4. **Code Organization**
```typescript
// Organize CSS classes logically
const buttonClasses = cn(
  // Base styles
  'inline-flex items-center justify-center',
  'rounded-md text-sm font-medium',
  'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring',
  'disabled:pointer-events-none disabled:opacity-50',
  
  // Variant styles
  variant === 'default' && 'bg-primary text-primary-foreground hover:bg-primary/90',
  variant === 'outline' && 'border border-input bg-background hover:bg-accent',
  
  // Size styles
  size === 'default' && 'h-10 px-4 py-2',
  size === 'sm' && 'h-9 rounded-md px-3',
  size === 'lg' && 'h-11 rounded-md px-8',
  
  // State styles
  className
);
```

### 5. **Error Boundaries**
```typescript
// Comprehensive error handling
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }
  
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  
  componentDidCatch(error, errorInfo) {
    // Log error to monitoring service
    console.error('Component error:', error, errorInfo);
  }
  
  render() {
    if (this.state.hasError) {
      return (
        <div className="p-4 bg-red-50 border border-red-200 rounded-md">
          <h2 className="text-lg font-semibold text-red-800">Something went wrong</h2>
          <p className="text-red-600">Please try refreshing the page.</p>
          <button 
            onClick={() => window.location.reload()}
            className="mt-2 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
          >
            Refresh Page
          </button>
        </div>
      );
    }
    
    return this.props.children;
  }
}
```

### 6. **Internationalization Support**
```typescript
// i18n ready components
const Button = ({ children, ...props }) => {
  const { dir } = useLocale();
  
  return (
    <button
      {...props}
      className={cn(
        'px-4 py-2 rounded-md',
        dir === 'rtl' && 'ml-2',
        dir === 'ltr' && 'mr-2',
        props.className
      )}
      dir={dir}
    >
      {children}
    </button>
  );
};
```

## Quick Reference

### Must-Have Imports
```typescript
import { Button } from "@/components/ui/button"
import { cn } from "@/lib/utils"
import { forwardRef } from "react"
import { cva, type VariantProps } from "class-variance-authority"
```

### Common Patterns
```typescript
// Conditional classes with proper typing
const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "underline-offset-4 hover:underline text-primary"
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-3 rounded-md",
        lg: "h-11 px-8 rounded-md"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
);

// Accessible component with proper forwarding
const Button = forwardRef<
  HTMLButtonElement,
  React.ButtonHTMLAttributes<HTMLButtonElement> & VariantProps<typeof buttonVariants>
>(({ className, variant, size, ...props }, ref) => {
  return (
    <button
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props}
    />
  );
});
Button.displayName = "Button";
```

### Accessibility Checklist
- [ ] Semantic HTML structure
- [ ] Proper heading hierarchy (h1-h6)
- [ ] Alt text for images
- [ ] Form labels and descriptions
- [ ] Keyboard navigation support
- [ ] Focus management
- [ ] ARIA attributes where needed
- [ ] Color contrast WCAG AA compliance
- [ ] Screen reader testing
- [ ] Reduced motion preferences

### Performance Checklist
- [ ] Critical CSS inlined
- [ ] Images optimized and lazy loaded
- [ ] Code splitting implemented
- [ ] Bundle size monitored
- [ ] Core Web Vitals measured
- [ ] Service worker configured
- [ ] Caching strategies implemented

---

**Remember**: The goal is to create interfaces that are beautiful, accessible, performant, and maintainable. Always test with real users and assistive technologies. When in doubt, favor semantic HTML and progressive enhancement over complex JavaScript solutions.

